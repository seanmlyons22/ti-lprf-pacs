#[doc = "Register `DEVICEID` reader"]
pub type R = crate::R<DeviceidSpec>;
#[doc = "Register `DEVICEID` writer"]
pub type W = crate::W<DeviceidSpec>;
#[doc = "Field `ALWAYSONE` reader - 0:0\\]
Value 1 in this bit field means that a 32-bit scan register exists."]
pub type AlwaysoneR = crate::BitReader;
#[doc = "Field `ALWAYSONE` writer - 0:0\\]
Value 1 in this bit field means that a 32-bit scan register exists."]
pub type AlwaysoneW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MANFACTURER` reader - 11:1\\]
JEP 106 assigned manufacturer ID. This field identifies the device as a Texas Instruments device."]
pub type ManfacturerR = crate::FieldReader<u16>;
#[doc = "Field `MANFACTURER` writer - 11:1\\]
JEP 106 assigned manufacturer ID. This field identifies the device as a Texas Instruments device."]
pub type ManfacturerW<'a, REG> = crate::FieldWriter<'a, REG, 11, u16>;
#[doc = "Field `DEVICE` reader - 27:12\\]
Value generated by RAMP for the SOC. This value uniquely identifies the die from any other TI device."]
pub type DeviceR = crate::FieldReader<u16>;
#[doc = "Field `DEVICE` writer - 27:12\\]
Value generated by RAMP for the SOC. This value uniquely identifies the die from any other TI device."]
pub type DeviceW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
#[doc = "Field `VERSION` reader - 31:28\\]
Monotonic increasing value indicating new hardware revision. A newer hardware revision shall never have a lower version than an older revision of hardware."]
pub type VersionR = crate::FieldReader;
#[doc = "Field `VERSION` writer - 31:28\\]
Monotonic increasing value indicating new hardware revision. A newer hardware revision shall never have a lower version than an older revision of hardware."]
pub type VersionW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
impl R {
    #[doc = "Bit 0 - 0:0\\]
Value 1 in this bit field means that a 32-bit scan register exists."]
    #[inline(always)]
    pub fn alwaysone(&self) -> AlwaysoneR {
        AlwaysoneR::new((self.bits & 1) != 0)
    }
    #[doc = "Bits 1:11 - 11:1\\]
JEP 106 assigned manufacturer ID. This field identifies the device as a Texas Instruments device."]
    #[inline(always)]
    pub fn manfacturer(&self) -> ManfacturerR {
        ManfacturerR::new(((self.bits >> 1) & 0x07ff) as u16)
    }
    #[doc = "Bits 12:27 - 27:12\\]
Value generated by RAMP for the SOC. This value uniquely identifies the die from any other TI device."]
    #[inline(always)]
    pub fn device(&self) -> DeviceR {
        DeviceR::new(((self.bits >> 12) & 0xffff) as u16)
    }
    #[doc = "Bits 28:31 - 31:28\\]
Monotonic increasing value indicating new hardware revision. A newer hardware revision shall never have a lower version than an older revision of hardware."]
    #[inline(always)]
    pub fn version(&self) -> VersionR {
        VersionR::new(((self.bits >> 28) & 0x0f) as u8)
    }
}
impl W {
    #[doc = "Bit 0 - 0:0\\]
Value 1 in this bit field means that a 32-bit scan register exists."]
    #[inline(always)]
    #[must_use]
    pub fn alwaysone(&mut self) -> AlwaysoneW<DeviceidSpec> {
        AlwaysoneW::new(self, 0)
    }
    #[doc = "Bits 1:11 - 11:1\\]
JEP 106 assigned manufacturer ID. This field identifies the device as a Texas Instruments device."]
    #[inline(always)]
    #[must_use]
    pub fn manfacturer(&mut self) -> ManfacturerW<DeviceidSpec> {
        ManfacturerW::new(self, 1)
    }
    #[doc = "Bits 12:27 - 27:12\\]
Value generated by RAMP for the SOC. This value uniquely identifies the die from any other TI device."]
    #[inline(always)]
    #[must_use]
    pub fn device(&mut self) -> DeviceW<DeviceidSpec> {
        DeviceW::new(self, 12)
    }
    #[doc = "Bits 28:31 - 31:28\\]
Monotonic increasing value indicating new hardware revision. A newer hardware revision shall never have a lower version than an older revision of hardware."]
    #[inline(always)]
    #[must_use]
    pub fn version(&mut self) -> VersionW<DeviceidSpec> {
        VersionW::new(self, 28)
    }
}
#[doc = "This register provides Device ID information. Note: This 32-bit register value is provided as output to DEBUGSS.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`deviceid::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`deviceid::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct DeviceidSpec;
impl crate::RegisterSpec for DeviceidSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`deviceid::R`](R) reader structure"]
impl crate::Readable for DeviceidSpec {}
#[doc = "`write(|w| ..)` method takes [`deviceid::W`](W) writer structure"]
impl crate::Writable for DeviceidSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets DEVICEID to value 0x0bb8_402f"]
impl crate::Resettable for DeviceidSpec {
    const RESET_VALUE: u32 = 0x0bb8_402f;
}
